/****************************** ДАМПЫ ЧИПОВ ******************************/

/*********** =====> RICOH <===== *********/

// 24С01_02 // Ricoh SP101E 2K (407059) for Ricoh SP 100 (SF/SU/E)
const PROGMEM char NOTE_SP_100[] = { "SP 100 (SP 101E)" };
const PROGMEM byte dump_ricoh_sp_101e_407059[128] = {
  0x20, 0x00, 0x01, 0x03, 0x03, 0x01, 0x01, 0x00, 0x64, 0x00, 0x34, 0x30, 0x36, 0x39, 0x34, 0x37,
  0x12, 0x04, 0x4D, 0x41, 0x16, 0x00, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 24С01_02 // Ricoh SP 110E 2.6K (407441) for Ricoh SP 111 (SF/SU)
const PROGMEM char NOTE_SP_111[] = { "SP 111 (SP 110E)" };
const PROGMEM byte dump_ricoh_sp_110e_407441[128] = {
  0x20, 0x00, 0x01, 0x05, 0x02, 0x01, 0x01, 0x00, 0x64, 0x00, 0x34, 0x30, 0x37, 0x34, 0x34, 0x31,
  0x17, 0x05, 0x4D, 0x43, 0x01, 0x00, 0x02, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 24С01_02 // Ricoh SP150HE 1.5K (408010) for Ricoh SP 150 (SU/W/SUw)
const PROGMEM char NOTE_SP_150[] = { "SP 150" };
const PROGMEM byte dump_ricoh_sp_150_408010[128] = {
  0x32, 0x00, 0x01, 0x03, 0x01, 0x01, 0x01, 0x00, 0x64, 0x00, 0x34, 0x30, 0x38, 0x30, 0x31, 0x30,
  0x16, 0x03, 0x4D, 0x4D, 0x04, 0x00, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 24С01_02 // Ricoh SP200HL 2.6K for Ricoh SP SP200/202/203/210/212 (407262) -- новый дамп
const PROGMEM char NOTE_SP_200_202_203_210_212[] = { "200/02/03/10/12" };
const PROGMEM byte dump_ricoh_sp_200_hl_407262[128] = {
  0x21, 0x00, 0x01, 0x03, 0x02, 0x01, 0x01, 0x00, 0x64, 0x00, 0x34, 0x30, 0x37, 0x32, 0x36, 0x32,
  0x13, 0x08, 0x4D, 0x43, 0x13, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 24С01_02 // Ricoh SP201HE 2.6K (111135) for Ricoh SP201/204/211/213/220
const PROGMEM char NOTE_SP_201_204_211_213_220[] = { "201/04/11/13/20" };
const PROGMEM byte dump_ricoh_sp_201_hl_111135[128] = {
  0x21, 0x00, 0x01, 0x04, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x31, 0x31, 0x31, 0x31, 0x35, 0x37,
  0x13, 0x07, 0x4D, 0x43, 0x11, 0x00, 0x14, 0x91, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 24С01_02 // Ricoh SP 277HE 2.6K series (408160) for Ricoh SP 277NwX / 277SNwX / 277SFNwX
const PROGMEM char NOTE_SP_277[] = { "SP 277" };
const PROGMEM byte dump_ricoh_sp_277_408160[128] = {
  0x21, 0x00, 0x01, 0x03, 0x02, 0x01, 0x01, 0x00, 0x64, 0x00, 0x34, 0x30, 0x38, 0x31, 0x36, 0x30,
  0x16, 0x01, 0x4D, 0x43, 0x27, 0x00, 0x1F, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 24С01_02 // Ricoh SP300 1.5K (406956) for Ricoh SP 300DN
const PROGMEM char NOTE_SP_300[] = { "SP 300" };
const PROGMEM byte dump_ricoh_sp_300_406956[128] = {
  0x13, 0x00, 0x01, 0x03, 0x03, 0x01, 0x01, 0x00, 0x64, 0x00, 0x34, 0x30, 0x36, 0x39, 0x35, 0x36,
  0x11, 0x11, 0x4A, 0x4D, 0x51, 0x00, 0x19, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 24С01_02 // Ricoh SP 311HE 3.5K (407246) for Ricoh SP 311/325 (DNw/SFw/Nw)
const PROGMEM char NOTE_SP_311_325_NORMAL[] = { "SP 311/325" };
const PROGMEM byte dump_ricoh_sp_311_407246[128] = {
  0x07, 0x00, 0x01, 0x03, 0x07, 0x01, 0x01, 0x00, 0x00, 0x00, 0x34, 0x30, 0x37, 0x32, 0x34, 0x36,
  0x13, 0x00, 0x47, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x58, 0x12,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 24С01_02 // Ricoh SP 311UXE 6.4K (821242) for Ricoh SP 311/325 (DNw/SFw/Nw)
const PROGMEM char NOTE_SP_311_325_LARGE[] = { "SP 311/325" };
const PROGMEM byte dump_ricoh_sp_311_821242[128] = {
  0x07, 0x00, 0x01, 0x03, 0x0D, 0x01, 0x01, 0x00, 0x64, 0x00, 0x38, 0x32, 0x31, 0x32, 0x34, 0x32,
  0x15, 0x10, 0x4D, 0x53, 0x22, 0x00, 0x03, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 24С01_02 // Ricoh SP 3400HE 5K (406522) for Ricoh SP3400/3410/3500/3510
const PROGMEM char NOTE_SP_3400_3410_3500_3510[] = { "3400/10 3500/10" };
const PROGMEM byte dump_ricoh_sp_3400he_406522[128] = {
  0x07, 0x00, 0x01, 0x03, 0x03, 0x01, 0x01, 0x00, 0x64, 0x00, 0x34, 0x30, 0x36, 0x35, 0x32, 0x32,
  0x11, 0x01, 0x4A, 0x4D, 0x02, 0x01, 0x70, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 24С01_02 // Ricoh SP 3500XE 6.4K (406990) для Ricoh SP3500/3510 (N/DN/SF)
const PROGMEM char NOTE_SP_3500_3510[] = { "ONLY 3500/10" };
const PROGMEM byte dump_ricoh_sp_3500xe_406990[128] = {
  0x07, 0x01, 0x01, 0x03, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00, 0x34, 0x30, 0x36, 0x39, 0x39, 0x30,
  0x12, 0x05, 0x4A, 0x4D, 0x53, 0x00, 0x33, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 24С01_02 // Ricoh SP 4500HE 12K (407318) for Ricoh SP3600/3610/4510 (DN/SF)
const PROGMEM char NOTE_SP_3600_3610_4510[] = { "SP 3600/10 4510" };
const PROGMEM byte dump_ricoh_sp_4500he_407318[128] = {
  0x23, 0x00, 0x01, 0x03, 0x78, 0x01, 0x01, 0x00, 0x64, 0x00, 0x34, 0x30, 0x37, 0x33, 0x31, 0x38,
  0x14, 0x09, 0x54, 0x4A, 0x03, 0x00, 0x05, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 24С01_02 // Ricoh SP 4500E 6K (407340) for Ricoh SP3600/3610/4510 (DN/SF)
//const PROGMEM char NOTE_SP_3600_3610_4510[] = { "SP 3600/10 4510" };
const PROGMEM byte dump_ricoh_sp_4500e_407340[128] = {
  0x23, 0x00, 0x01, 0x03, 0x3C, 0x01, 0x01, 0x00, 0x64, 0x00, 0x34, 0x30,
  0x37, 0x33, 0x34, 0x30, 0x14, 0x07, 0x54, 0x4A, 0x08, 0x00, 0x07, 0x55,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


// 24С01_02 // Ricoh SP C250/С260 2K (407543)  Black for Ricoh C250/С260 (DN/DNW/SF/SFNW/FNW)
const PROGMEM char NOTE_SP_C250_260_B[] = { "SP 250/260 B" };
const PROGMEM byte dump_ricoh_sp_c250_c260_407543_black[128] = {
  0xA8, 0x00, 0x01, 0x03, 0x12, 0x01, 0x01, 0xFF, 0x64, 0x00, 0x34, 0x30, 0x37, 0x35, 0x34, 0x33,
  0x14, 0x02, 0x41, 0x42, 0x16, 0x00, 0x1B, 0x32, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x64, 0x00, 0x00, 0x00,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 24С01_02 // Ricoh SP C250/С260 1.6K (407544) Cyan for Ricoh C250/С260 (DN/DNW/SF/SFNW/FNW)
const PROGMEM char NOTE_SP_C250_260_C[] = { "SP 250/260 C" };
const PROGMEM byte dump_ricoh_sp_c250_c260_407544_cyan[128] = {
  0xA8, 0x00, 0x01, 0x03, 0x0E, 0x02, 0x01, 0xFF, 0x64, 0x00, 0x34, 0x30, 0x37, 0x35, 0x34, 0x34,
  0x14, 0x02, 0x41, 0x42, 0x17, 0x00, 0x16, 0x35, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x64, 0x00, 0x00, 0x00,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 24С01_02 // Ricoh SP C250/С260 1.6K (407545) Magenta for Ricoh C250/С260 (DN/DNW/SF/SFNW/FNW)
const PROGMEM char NOTE_SP_C250_260_M[] = { "SP 250/260 M" };
const PROGMEM byte dump_ricoh_sp_c250_c260_407545_magenta[128] = {
  0xA8, 0x00, 0x01, 0x03, 0x0E, 0x03, 0x01, 0xFF, 0x64, 0x00, 0x34, 0x30, 0x37, 0x35, 0x34, 0x35,
  0x14, 0x02, 0x41, 0x42, 0x18, 0x00, 0x11, 0x39, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x64, 0x00, 0x00, 0x00,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 24С01_02 // Ricoh SP C250/С260 1.6K (407546) Yellow for Ricoh C250/С260 (DN/DNW/SF/SFNW/FNW)
const PROGMEM char NOTE_SP_C250_260_Y[] = { "SP 250/260 Y" };
const PROGMEM byte dump_ricoh_sp_c250_c260_407546_yellow[128] = {
  0xA8, 0x00, 0x01, 0x03, 0x0E, 0x04, 0x01, 0xFF, 0x64, 0x00, 0x34, 0x30, 0x37, 0x35, 0x34, 0x36,
  0x14, 0x02, 0x41, 0x42, 0x19, 0x00, 0x14, 0x36, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x64, 0x00, 0x00, 0x00,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 24С01_02 // Ricoh SP C252 6.5K (407716) Black for Ricoh C252
const PROGMEM char NOTE_SP_C252_B[] = { "SP 252 B" };
const PROGMEM byte dump_ricoh_sp_c252_407716_black[128] = {
  0xA8, 0x00, 0x01, 0x03, 0x32, 0x01, 0x01, 0xFF, 0x64, 0x00, 0x34, 0x30,
  0x37, 0x37, 0x31, 0x36, 0x14, 0x01, 0x41, 0x42, 0x36, 0x00, 0x36, 0x37,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x64, 0x00, 0x00, 0x00,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 24С01_02 // Ricoh SP C252 6K (407717) Cyan for Ricoh C252
const PROGMEM char NOTE_SP_C252_C[] = { "SP 252 C" };
const PROGMEM byte dump_ricoh_sp_c252_407717_cyan[128] = {
  0xA8, 0x00, 0x01, 0x03, 0x32, 0x02, 0x01, 0xFF, 0x64, 0x00, 0x34, 0x30,
  0x37, 0x37, 0x31, 0x37, 0x14, 0x05, 0x41, 0x42, 0x37, 0x01, 0x34, 0x35,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x64, 0x00, 0x00, 0x00,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 24С01_02 // Ricoh SP C252 6K (407718)  Magenta for Ricoh C252
const PROGMEM char NOTE_SP_C252_M[] = { "SP 252 M" };
const PROGMEM byte dump_ricoh_sp_c252_407718_magenta[128] = {
  0xA8, 0x00, 0x01, 0x03, 0x32, 0x03, 0x01, 0xFF, 0x64, 0x00, 0x34, 0x30,
  0x37, 0x37, 0x31, 0x38, 0x14, 0x03, 0x41, 0x42, 0x38, 0x00, 0x38, 0x37,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x64, 0x00, 0x00, 0x00,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 24С01_02 // Ricoh SP C252 6K (407719) Yellow for Ricoh C252
const PROGMEM char NOTE_SP_C252_Y[] = { "SP 252 Y" };
const PROGMEM byte dump_ricoh_sp_c252_407719_yellow[128] = {
  0xA8, 0x00, 0x01, 0x03, 0x32, 0x04, 0x01, 0xFF, 0x64, 0x00, 0x34, 0x30,
  0x37, 0x37, 0x31, 0x39, 0x14, 0x01, 0x41, 0x42, 0x39, 0x00, 0x36, 0x31,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x64, 0x00, 0x00, 0x00,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 24С01_02 // Ricoh SP С220 С221 С222 С240  2k (406144) Black
const PROGMEM char NOTE_SP_C220_B[] = { "C220-222 240 B" };
const PROGMEM byte dump_ricoh_sp_c220_221_222_240_406144_black[128] = {
  0xA7, 0x00, 0x01, 0x03, 0x14, 0x01, 0x01, 0xFF, 0x64, 0x00, 0x34, 0x30,
  0x36, 0x31, 0x34, 0x34, 0x09, 0x05, 0x41, 0x42, 0x62, 0x00, 0x37, 0x39,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x64, 0x00, 0x00, 0x00,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 24С01_02 // Ricoh SP С220 С221 С222 С240  2k (406145) Cyan
const PROGMEM char NOTE_SP_C220_C[] = { "C220-222 240 C" };
const PROGMEM byte dump_ricoh_sp_c220_221_222_240_406145_cyan[128] = {
  0xA7, 0x00, 0x01, 0x03, 0x14, 0x02, 0x01, 0xFF, 0x64, 0x00, 0x34, 0x30,
  0x36, 0x31, 0x34, 0x35, 0x09, 0x05, 0x41, 0x42, 0x63, 0x00, 0x14, 0x43,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x64, 0x00, 0x00, 0x00,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 24С01_02 // Ricoh SP С220 С221 С222 С240  2k (406146) Magenta
const PROGMEM char NOTE_SP_C220_M[] = { "C220-222 240 M" };
const PROGMEM byte dump_ricoh_sp_c220_221_222_240_406146_magenta[128] = {
  0xA7, 0x00, 0x01, 0x03, 0x14, 0x03, 0x01, 0xFF, 0x64, 0x00, 0x34, 0x30,
  0x36, 0x31, 0x34, 0x36, 0x09, 0x05, 0x41, 0x42, 0x64, 0x00, 0x22, 0x29,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x64, 0x00, 0x00, 0x00,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 24С01_02 // Ricoh SP С220 С221 С222 С240  2k (406147) Yellow
const PROGMEM char NOTE_SP_C220_Y[] = { "C220-222 240 Y" };
const PROGMEM byte dump_ricoh_sp_c220_221_222_240_406147_yellow[128] = {
  0xA7, 0x00, 0x01, 0x03, 0x14, 0x04, 0x01, 0xFF, 0x64, 0x00, 0x34, 0x30,
  0x36, 0x31, 0x34, 0x37, 0x09, 0x11, 0x41, 0x42, 0x65, 0x00, 0x07, 0x24,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x64, 0x00, 0x00, 0x00,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 24С01_02 // Ricoh SP SP 400/450  5k (408061)
const PROGMEM char NOTE_SP_400_450[] = { "SP 400/450" };
const PROGMEM byte dump_ricoh_sp_400_450[128] = {
  0x23, 0x00, 0x01, 0x03, 0x32, 0x01, 0x30, 0x00, 0x64, 0x00, 0x34, 0x30,
  0x38, 0x30, 0x36, 0x31, 0x16, 0x02, 0x54, 0x4A, 0x29, 0x00, 0x02, 0x51,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


// 24С01_02 // Ricoh SP330H 7K (408283) for Ricoh Ricoh SP 330
const PROGMEM char NOTE_SP_330[] = { "SP 330" };
const PROGMEM byte dump_ricoh_sp_330_408283[128] = {
  0x45, 0x00, 0x01, 0x04, 0x0E, 0x01, 0x01, 0x00, 0x64, 0x00, 0x34, 0x30,
  0x38, 0x32, 0x38, 0x33, 0x18, 0x07, 0x52, 0x47, 0x14, 0x00, 0x32, 0x38,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 24С01_02 // Ricoh SP310 cyan (122700) for Ricoh Ricoh SP 310
const PROGMEM char NOTE_SP_310_C[] = { "SP 310 C" };
const PROGMEM byte dump_ricoh_sp_310_122700_cyan[128] = {
  0xA8, 0x00, 0x01, 0x03, 0x32, 0x02, 0x01, 0xFF, 0x64, 0x00, 0x31, 0x32,
  0x32, 0x37, 0x30, 0x30, 0x09, 0x03, 0x41, 0x42, 0x17, 0x00, 0x17, 0x06,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x64, 0x00, 0x00, 0x00,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 24С01_02 // Ricoh SP310 black (406479) for Ricoh Ricoh SP 310
const PROGMEM char NOTE_SP_310_B[] = { "SP 310 B" };
const PROGMEM byte dump_ricoh_sp_310_406479_black[128] = {
  0xA8, 0x00, 0x01, 0x03, 0x32, 0x01, 0x01, 0xFF, 0x64, 0x00, 0x34, 0x30,
  0x36, 0x34, 0x37, 0x39, 0x11, 0x07, 0x41, 0x42, 0x16, 0x00, 0x37, 0x80,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x64, 0x00, 0x00, 0x00,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


// 24С01_02 // Ricoh SP310 magenta (122728) for Ricoh Ricoh SP 310
const PROGMEM char NOTE_SP_310_M[] = { "SP 310 M" };
const PROGMEM byte dump_ricoh_sp_310_122728_magenta[128] = {
  0xA8, 0x00, 0x01, 0x03, 0x32, 0x03, 0x01, 0xFF, 0x64, 0x00, 0x31, 0x32,
  0x32, 0x37, 0x32, 0x38, 0x09, 0x11, 0x41, 0x42, 0x18, 0x00, 0x11, 0x32,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x64, 0x00, 0x00, 0x00,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 24С01_02 // Ricoh SP310 yellow (406482) for Ricoh Ricoh SP 310
const PROGMEM char NOTE_SP_310_Y[] = { "SP 310 Y" };
const PROGMEM byte dump_ricoh_sp_310_406482_yellow[128] = {
  0xA8, 0x00, 0x01, 0x03, 0x32, 0x04, 0x01, 0xFF, 0x64, 0x00, 0x34, 0x30,
  0x36, 0x34, 0x38, 0x32, 0x11, 0x07, 0x41, 0x42, 0x19, 0x00, 0x02, 0x50,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x64, 0x00, 0x00, 0x00,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 24С01_02 // Ricoh SP360 cyan (408177)
const PROGMEM char NOTE_SP_360_C[] = { "SP 360 C" };
const PROGMEM byte dump_ricoh_sp_360_408177_cyan[128] = {
  0x2F, 0x00, 0x01, 0x02, 0x2A, 0x02, 0x01, 0x00, 0x64, 0x00, 0x34, 0x30,
  0x38, 0x31, 0x37, 0x37, 0x17, 0x07, 0x54, 0x4A, 0x07, 0x00, 0x25, 0x4E,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 24С01_02 // Ricoh SP360 magenta (408178)
const PROGMEM char NOTE_SP_360_M[] = { "SP 360 M" };
const PROGMEM byte dump_ricoh_sp_360_408178_magenta[128] = {
  0x2F, 0x00, 0x01, 0x02, 0x2D, 0x03, 0x01, 0x00, 0x64, 0x00, 0x34, 0x30,
  0x38, 0x31, 0x37, 0x38, 0x17, 0x02, 0x54, 0x4A, 0x07, 0x00, 0x26, 0x4F,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 24С01_02 // Ricoh SP360 yellow (408179)
const PROGMEM char NOTE_SP_360_Y[] = { "SP 360 Y" };
const PROGMEM byte dump_ricoh_sp_360_408179_yellow[128] = {
  0x2F, 0x00, 0x01, 0x02, 0x27, 0x04, 0x01, 0x00, 0x64, 0x00, 0x34, 0x30,
  0x38, 0x31, 0x37, 0x39, 0x17, 0x01, 0x54, 0x4A, 0x07, 0x00, 0x26, 0x46,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Ricoh SP360 black (408184)
const PROGMEM char NOTE_SP_360_B[] = { "SP 360 B" };
const PROGMEM byte DUMP_SP_360_BLACK[128] = {
  0x2F, 0x00, 0x01, 0x02, 0x41, 0x01, 0x01, 0x00, 0x64, 0x00, 0x34, 0x30,
  0x38, 0x31, 0x37, 0x36, 0x17, 0x01, 0x54, 0x4A, 0x07, 0x00, 0x24, 0x53,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Ricoh SP377 6.4K (408162) => Aficio SP 377DNwX/377SFNwX
const PROGMEM char NOTE_SP_377[] = { "SP 377" };
const PROGMEM byte DUMP_SP_377[128] = {
  0x07, 0x02, 0x01, 0x02, 0x0D, 0x01, 0x01, 0x00, 0x64, 0x00, 0x34, 0x30,
  0x38, 0x31, 0x36, 0x31, 0x16, 0x02, 0x4D, 0x53, 0x27, 0x00, 0x07, 0x56,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
/*********** =====> SAMSUNG <===== *********/

// 24С04_16 // Samsung SCX-D4200A 3K for Samsung SCX-4200/4220
const PROGMEM char NOTE_SCX_D4200[] = { "SCX 4200/20" };
const PROGMEM byte dump_samsung_scx_d4200a[512] = {
  0x43, 0x34, 0x32, 0x30, 0x30, 0x45, 0x58, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x30, 0x31, 0x33, 0x30, 0x37, 0x00, 0x00,
  0x43, 0x52, 0x55, 0x4D, 0x2D, 0x31, 0x33, 0x30, 0x37, 0x32, 0x35, 0x33, 0x32, 0x31, 0x31, 0x35,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x34, 0x32, 0x30, 0x30, 0x45, 0x58, 0x50,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0xDD, 0x00, 0x22, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};

/*********** =====> XEROX <===== *********/

// 24С04_16 // Xerox 013R00625 3K for XEROX WC 3119
const PROGMEM char NOTE_WC_3119[] = { "WC 3119" };
const PROGMEM byte dump_xerox_013R00625[512] = {
  0xA8, 0xCF, 0x58, 0x45, 0x52, 0x4F, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x30, 0x30, 0x36, 0x30, 0x36, 0x00, 0x00,
  0x43, 0x52, 0x55, 0x4D, 0x2D, 0x30, 0x36, 0x30, 0x36, 0x32, 0x39, 0x30, 0x39, 0x33, 0x31, 0x34,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA8, 0xCF, 0x58, 0x45, 0x52, 0x4F, 0x58, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0xDD, 0x00, 0x22, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x43, 0x72, 0x75, 0x6D, 0x20, 0x42, 0x79, 0x20,
  0x48, 0x77, 0x61, 0x6E, 0x67, 0x2E, 0x73, 0x6B, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};

// 24С04_16 // Xerox 013R00621 2K for XEROX PE 220
const PROGMEM char NOTE_PE_220[] = { "PE 220" };
const PROGMEM byte dump_xerox_013R00621[256] = {
  0x20, 0x58, 0x45, 0x52, 0x4F, 0x58, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x32, 0x30, 0x31, 0x30, 0x30, 0x32, 0x00, 0x00,
  0x43, 0x52, 0x55, 0x4D, 0x2D, 0x31, 0x30, 0x30, 0x32, 0x30, 0x36, 0x39,
  0x38, 0x31, 0x36, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x20, 0x58, 0x45, 0x52, 0x4F, 0x58, 0x20, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xCC, 0xDD, 0x00, 0x22, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF
};

// 24С04_16 // Xerox 006R01278 8K for Xerox WC 4118
const PROGMEM char NOTE_WC_4118[] = { "WC 4118" };
const PROGMEM byte dump_xerox_006R01278[512] = {
  0x20, 0x58, 0x45, 0x52, 0x4F, 0x58, 0x32, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x30, 0x30, 0x38, 0x30, 0x32, 0x00, 0x00,
  0x43, 0x52, 0x55, 0x4D, 0x2D, 0x30, 0x38, 0x30, 0x32, 0x30, 0x36, 0x31, 0x36, 0x30, 0x30, 0x31,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x58, 0x45, 0x52, 0x4F, 0x58, 0x32, 0x20,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xA8, 0xCF, 0x58, 0x45, 0x52, 0x4F, 0x58, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x30, 0x30, 0x38, 0x30, 0x32, 0x00, 0x00,
  0x43, 0x52, 0x55, 0x4D, 0x2D, 0x30, 0x38, 0x30, 0x32, 0x30, 0x36, 0x31, 0x36, 0x30, 0x30, 0x31,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA8, 0xCF, 0x58, 0x45, 0x52, 0x4F, 0x58, 0x32,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};

/*********** =====> CANON <===== *********/
// 416RT //  Canon  MC-G02 for Canon PIXMA G1420, G2420, G2460, G3420, G3460, G640 и G540
const PROGMEM char NOTE_CANON_G_SERIES[] = { "Canon G Series" };
const PROGMEM byte dump_canon_g_series[2048] = {
  0x22, 0x7B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x7B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x83, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5A, 0x3B, 0x7F, 0x54, 0x8A, 0x03, 0x3A, 0x39, 0x33, 0x12, 0xFE, 0xC0, 0xFD, 0x71, 0x48, 0x9F,
  0x3D, 0xFD, 0x3D, 0xF6, 0xE2, 0xB9, 0xA2, 0x46, 0x43, 0x3C, 0x0C, 0xC7, 0x6B, 0x1D, 0x20, 0xA2, 0x4A, 0x31, 0x9F, 0x8B, 0xE6, 0x22, 0x31, 0xE2,
  0x54, 0xAB, 0x64, 0xA7, 0x45, 0x14, 0x51, 0x13, 0xE8, 0xA0, 0xEA, 0x0F, 0x37, 0xF1, 0x9F, 0xDB, 0x1F, 0x82, 0x03, 0x6B, 0x6C, 0xDF, 0x96, 0x85,
  0x75, 0xDA, 0x7C, 0xD1, 0x32, 0x56, 0xCA, 0xC9, 0xA2, 0x82, 0x1F, 0xCA, 0xF8, 0x98, 0xE7, 0x07, 0x41, 0x98, 0xF8, 0xAD, 0x4F, 0x6B, 0x43, 0x81,
  0x84, 0xAC, 0x78, 0x24, 0x84, 0x56, 0x89, 0xE1, 0xB8, 0xBE, 0xDC, 0xD2, 0x7A, 0x05, 0x3F, 0xC6, 0x1C, 0xF9, 0x1B, 0xCB, 0x8F, 0x21, 0x05, 0xF1,
  0xB0, 0xCC, 0xFA, 0xEE, 0x80, 0x3A, 0xC0, 0x9C, 0x6E, 0x48, 0x02, 0xF2, 0x8A, 0xE2, 0x4E, 0x96, 0xF7, 0xAE, 0xD1, 0x29, 0xC1, 0xB8, 0x72, 0xF5,
  0x66, 0xEF, 0xD9, 0xC1, 0x7F, 0xF5, 0x3E, 0x64, 0x03, 0x05, 0xB6, 0xB3, 0x32, 0xDC, 0x4E, 0xF5, 0x4C, 0x1A, 0xA5, 0x21, 0xA7, 0xCF, 0xAD, 0x90,
  0x29, 0x9A, 0x16, 0xF1, 0x72, 0x2F, 0x9E, 0x21, 0xEF, 0xE3, 0x4D, 0xE7, 0x00, 0x6B, 0x82, 0xE3, 0x2E, 0xC0, 0x38, 0x64, 0x72, 0xC7, 0x77, 0xC5,
  0x1B, 0xEA, 0x83, 0xCC, 0x14, 0x67, 0xD8, 0x94, 0x9D, 0x9F, 0x53, 0x82, 0x4F, 0xD2, 0x54, 0x19, 0x84, 0xF3, 0xEC, 0x98, 0x72, 0x9C, 0x27, 0x83,
  0x3F, 0x6D, 0x3B, 0xA4, 0x15, 0xD6, 0x0A, 0x8B, 0x72, 0xE2, 0x0B, 0x85, 0x88, 0xF8, 0x3F, 0xE5, 0xCE, 0xE6, 0xEF, 0x16, 0xC0, 0xE2, 0x48, 0x42,
  0xC9, 0x4C, 0x0C, 0xD2, 0xC3, 0xBA, 0x27, 0xFF, 0x8F, 0x08, 0x23, 0x3E, 0xD2, 0xA8, 0x28, 0xA8, 0xEB, 0x91, 0x8A, 0x5E, 0x43, 0xFA, 0x3A, 0xD1,
  0xFF, 0xEE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5A, 0x3B, 0x7F, 0x54, 0x8A, 0x03, 0x3A, 0x39,
  0x33, 0x12, 0xFE, 0xC0, 0xFD, 0x71, 0x48, 0x9F, 0x3D, 0xFD, 0x3D, 0xF6, 0xE2, 0xB9, 0xA2, 0x46, 0x43, 0x3C, 0x0C, 0xC7, 0x6B, 0x1D, 0x20, 0xA2,
  0x4A, 0x31, 0x9F, 0x8B, 0xE6, 0x22, 0x31, 0xE2, 0x54, 0xAB, 0x64, 0xA7, 0x45, 0x14, 0x51, 0x13, 0xE8, 0xA0, 0xEA, 0x0F, 0x37, 0xF1, 0x9F, 0xDB,
  0x1F, 0x82, 0x03, 0x6B, 0x6C, 0xDF, 0x96, 0x85, 0x75, 0xDA, 0x7C, 0xD1, 0x32, 0x56, 0xCA, 0xC9, 0xA2, 0x82, 0x1F, 0xCA, 0xF8, 0x98, 0xE7, 0x07,
  0x41, 0x98, 0xF8, 0xAD, 0x4F, 0x6B, 0x43, 0x81, 0x84, 0xAC, 0x78, 0x24, 0x84, 0x56, 0x89, 0xE1, 0xB8, 0xBE, 0xDC, 0xD2, 0x7A, 0x05, 0x3F, 0xC6,
  0x1C, 0xF9, 0x1B, 0xCB, 0x8F, 0x21, 0x05, 0xF1, 0xB0, 0xCC, 0xFA, 0xEE, 0x80, 0x3A, 0xC0, 0x9C, 0x6E, 0x48, 0x02, 0xF2, 0x8A, 0xE2, 0x4E, 0x96,
  0xF7, 0xAE, 0xD1, 0x29, 0xC1, 0xB8, 0x72, 0xF5, 0x66, 0xEF, 0xD9, 0xC1, 0x7F, 0xF5, 0x3E, 0x64, 0x03, 0x05, 0xB6, 0xB3, 0x32, 0xDC, 0x4E, 0xF5,
  0x4C, 0x1A, 0xA5, 0x21, 0xA7, 0xCF, 0xAD, 0x90, 0x29, 0x9A, 0x16, 0xF1, 0x72, 0x2F, 0x9E, 0x21, 0xEF, 0xE3, 0x4D, 0xE7, 0x00, 0x6B, 0x82, 0xE3,
  0x2E, 0xC0, 0x38, 0x64, 0x72, 0xC7, 0x77, 0xC5, 0x1B, 0xEA, 0x83, 0xCC, 0x14, 0x67, 0xD8, 0x94, 0x9D, 0x9F, 0x53, 0x82, 0x4F, 0xD2, 0x54, 0x19,
  0x84, 0xF3, 0xEC, 0x98, 0x72, 0x9C, 0x27, 0x83, 0x3F, 0x6D, 0x3B, 0xA4, 0x15, 0xD6, 0x0A, 0x8B, 0x72, 0xE2, 0x0B, 0x85, 0x88, 0xF8, 0x3F, 0xE5,
  0xCE, 0xE6, 0xEF, 0x16, 0xC0, 0xE2, 0x48, 0x42, 0xC9, 0x4C, 0x0C, 0xD2, 0xC3, 0xBA, 0x27, 0xFF, 0x8F, 0x08, 0x23, 0x3E, 0xD2, 0xA8, 0x28, 0xA8,
  0xEB, 0x91, 0x8A, 0x5E, 0x43, 0xFA, 0x3A, 0xD1, 0xFF, 0xEE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x5B, 0x17, 0x82, 0x71, 0xDA, 0x80, 0x53, 0x24, 0x14, 0x90, 0x91, 0x15, 0x3D, 0xA8, 0x71, 0xC1, 0x9B, 0xBD, 0x94, 0x4A, 0xAF, 0xF7, 0x82, 0x55,
  0xB0, 0x99, 0x39, 0x2D, 0x95, 0xC2, 0x09, 0xBC, 0xD5, 0x18, 0xC4, 0xE6, 0x8F, 0xEE, 0xF4, 0xD1, 0x0E, 0x51, 0x99, 0x6D, 0x82, 0x43, 0xB9, 0x9A,
  0xFD, 0xE3, 0x61, 0xBD, 0x12, 0xB8, 0x6E, 0x34, 0x09, 0xD6, 0xF2, 0x51, 0x01, 0x76, 0x4B, 0xE4, 0x57, 0x5C, 0x3D, 0x50, 0xF4, 0x28, 0xA5, 0x6F,
  0xB1, 0x60, 0x88, 0x4A, 0x2C, 0x25, 0x7E, 0x12, 0x55, 0xFA, 0x81, 0x22, 0x6C, 0x69, 0xDF, 0x7F, 0x01, 0xC6, 0x12, 0x09, 0x00, 0x0C, 0x46, 0xBE,
  0xE7, 0x5E, 0x53, 0xB3, 0xBA, 0x3A, 0xFE, 0x99, 0xBD, 0x2C, 0x79, 0x6C, 0x52, 0x0B, 0x5E, 0xA0, 0xD2, 0x05, 0x3D, 0xC5, 0x99, 0x50, 0x55, 0xC7,
  0x2D, 0x17, 0x37, 0x77, 0x33, 0x0F, 0xBE, 0x75, 0xD3, 0x83, 0x16, 0x7C, 0x26, 0x22, 0xED, 0xA3, 0x96, 0xDD, 0x48, 0x4F, 0x85, 0x72, 0xB1, 0xC2,
  0xB7, 0xD9, 0x1D, 0x04, 0x20, 0xEF, 0x14, 0x62, 0x97, 0xB5, 0xB2, 0x87, 0xE1, 0x41, 0x9D, 0x92, 0x8A, 0x10, 0xC7, 0xE8, 0x15, 0x50, 0xEA, 0x95,
  0x19, 0xAF, 0x1C, 0x96, 0x50, 0xDE, 0x73, 0x8C, 0x34, 0xAB, 0xE5, 0xCF, 0x66, 0x2C, 0xF7, 0x3D, 0x5C, 0xC7, 0xA8, 0xED, 0x70, 0x0B, 0xF7, 0x62,
  0x1E, 0xD6, 0x94, 0xDC, 0x6A, 0x03, 0x06, 0x8B, 0xD9, 0x06, 0x8E, 0x18, 0xF2, 0x52, 0x05, 0xF5, 0x82, 0xBF, 0xE1, 0x6A, 0x57, 0x3B, 0xD0, 0xF2,
  0x03, 0x28, 0x67, 0xE5, 0xF3, 0xB8, 0x07, 0x0C, 0x3E, 0xEE, 0xEB, 0x4C, 0x6D, 0x7A, 0x07, 0x9C, 0x2C, 0x3D, 0xC2, 0x9A, 0x82, 0xC6, 0x85, 0xA6,
  0xC8, 0x65, 0xA6, 0x2C, 0x52, 0xDD, 0xED, 0xDD, 0xBD, 0x2F, 0x47, 0xC6, 0x26, 0x78, 0xF3, 0xCE, 0x0A, 0x5B, 0xC4, 0xA6, 0xF0, 0x8D, 0x2E, 0x47,
  0x60, 0x8B, 0xDB, 0xD6, 0xDA, 0x87, 0x01, 0xCA, 0x11, 0x46, 0xF9, 0xB0, 0xC7, 0xD2, 0x35, 0xA0, 0xC5, 0xAE, 0xD0, 0x38, 0x8E, 0x6B, 0xF5, 0xB3,
  0xF0, 0xE3, 0x0D, 0xDB, 0x5E, 0x22, 0x5E, 0x74, 0x3A, 0x7E, 0xE9, 0xCF, 0xCC, 0x36, 0x88, 0xF2, 0x13, 0x83, 0x05, 0x84, 0x57, 0xBF, 0x5A, 0xC0,
  0x6F, 0x3E, 0x46, 0x79, 0x4F, 0x32, 0x94, 0x2C, 0x5B, 0x52, 0x1D, 0x2F, 0x2A, 0x79, 0xAC, 0x82, 0x8E, 0x6E, 0xBC, 0x97, 0x87, 0xD0, 0x0C, 0x1C,
  0x2F, 0x46, 0xA2, 0x37, 0xE8, 0xCC, 0xCD, 0xCE, 0x8A, 0x33, 0xF2, 0x7A, 0xB2, 0x3A, 0xB1, 0x47, 0x74, 0xE9, 0xB1, 0x7F, 0xAE, 0xC3, 0x7B, 0x7A,
  0xED, 0x19, 0xAD, 0xA7, 0x5F, 0x6F, 0xDB, 0x3D, 0x78, 0xA6, 0x44, 0x37, 0x25, 0x85, 0x76, 0x4A, 0x49, 0x6A, 0x08, 0xE3, 0x7D, 0x7D, 0x80, 0x2F,
  0xF6, 0x5F, 0x7C, 0x90, 0x00, 0xB2, 0x52, 0xBC, 0xC9, 0x21, 0xFA, 0x3F, 0xEE, 0x9E, 0x68, 0xD9, 0x76, 0x1A, 0x73, 0xDB, 0xEB, 0x03, 0xA4, 0x31,
  0xD1, 0x62, 0x4D, 0xF4, 0xBA, 0x52, 0x5B, 0xB2, 0x43, 0xF0, 0xA8, 0xD9, 0x91, 0xE5, 0xD6, 0x5C, 0x1D, 0xA5, 0x3C, 0x35, 0x9D, 0x4B, 0xCB, 0x59,
  0x4B, 0xCD, 0x41, 0x59, 0x26, 0x7F, 0x1C, 0x15, 0xB4, 0x94, 0xE5, 0xA8, 0x6B, 0x3D, 0xBA, 0xE3, 0xBD, 0x68, 0x31, 0x58, 0x12, 0x59, 0x4B, 0x6D,
  0xFB, 0x5C, 0x0B, 0xEE, 0xA0, 0xD6, 0x48, 0xA0, 0x1C, 0xEA, 0xD1, 0x67, 0x7E, 0x0D, 0x55, 0xEA, 0x5D, 0x3B, 0x40, 0x02, 0x35, 0x75, 0xF6, 0x42,
  0x05, 0xBD, 0x4B, 0xD9, 0x9F, 0x31, 0x7A, 0xB4, 0x9D, 0xA2, 0xDB, 0x11, 0xC5, 0x37, 0x42, 0x55, 0x4F, 0x9E, 0xCA, 0x56, 0xCB, 0x07, 0xE6, 0x58,
  0x6E, 0x37, 0xB1, 0x5C, 0x1C, 0xD4, 0x32, 0x4F, 0xA9, 0xE7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5B, 0x17, 0x82, 0x71, 0xDA, 0x80, 0x53, 0x24,
  0x14, 0x90, 0x91, 0x15, 0x3D, 0xA8, 0x71, 0xC1, 0x9B, 0xBD, 0x94, 0x4A, 0xAF, 0xF7, 0x82, 0x55, 0xB0, 0x99, 0x39, 0x2D, 0x95, 0xC2, 0x09, 0xBC,
  0xD5, 0x18, 0xC4, 0xE6, 0x8F, 0xEE, 0xF4, 0xD1, 0x0E, 0x51, 0x99, 0x6D, 0x82, 0x43, 0xB9, 0x9A, 0xFD, 0xE3, 0x61, 0xBD, 0x12, 0xB8, 0x6E, 0x34,
  0x09, 0xD6, 0xF2, 0x51, 0x01, 0x76, 0x4B, 0xE4, 0x57, 0x5C, 0x3D, 0x50, 0xF4, 0x28, 0xA5, 0x6F, 0xB1, 0x60, 0x88, 0x4A, 0x2C, 0x25, 0x7E, 0x12,
  0x55, 0xFA, 0x81, 0x22, 0x6C, 0x69, 0xDF, 0x7F, 0x01, 0xC6, 0x12, 0x09, 0x00, 0x0C, 0x46, 0xBE, 0xE7, 0x5E, 0x53, 0xB3, 0xBA, 0x3A, 0xFE, 0x99,
  0xBD, 0x2C, 0x79, 0x6C, 0x52, 0x0B, 0x5E, 0xA0, 0xD2, 0x05, 0x3D, 0xC5, 0x99, 0x50, 0x55, 0xC7, 0x2D, 0x17, 0x37, 0x77, 0x33, 0x0F, 0xBE, 0x75,
  0xD3, 0x83, 0x16, 0x7C, 0x26, 0x22, 0xED, 0xA3, 0x96, 0xDD, 0x48, 0x4F, 0x85, 0x72, 0xB1, 0xC2, 0xB7, 0xD9, 0x1D, 0x04, 0x20, 0xEF, 0x14, 0x62,
  0x97, 0xB5, 0xB2, 0x87, 0xE1, 0x41, 0x9D, 0x92, 0x8A, 0x10, 0xC7, 0xE8, 0x15, 0x50, 0xEA, 0x95, 0x19, 0xAF, 0x1C, 0x96, 0x50, 0xDE, 0x73, 0x8C,
  0x34, 0xAB, 0xE5, 0xCF, 0x66, 0x2C, 0xF7, 0x3D, 0x5C, 0xC7, 0xA8, 0xED, 0x70, 0x0B, 0xF7, 0x62, 0x1E, 0xD6, 0x94, 0xDC, 0x6A, 0x03, 0x06, 0x8B,
  0xD9, 0x06, 0x8E, 0x18, 0xF2, 0x52, 0x05, 0xF5, 0x82, 0xBF, 0xE1, 0x6A, 0x57, 0x3B, 0xD0, 0xF2, 0x03, 0x28, 0x67, 0xE5, 0xF3, 0xB8, 0x07, 0x0C,
  0x3E, 0xEE, 0xEB, 0x4C, 0x6D, 0x7A, 0x07, 0x9C, 0x2C, 0x3D, 0xC2, 0x9A, 0x82, 0xC6, 0x85, 0xA6, 0xC8, 0x65, 0xA6, 0x2C, 0x52, 0xDD, 0xED, 0xDD,
  0xBD, 0x2F, 0x47, 0xC6, 0x26, 0x78, 0xF3, 0xCE, 0x0A, 0x5B, 0xC4, 0xA6, 0xF0, 0x8D, 0x2E, 0x47, 0x60, 0x8B, 0xDB, 0xD6, 0xDA, 0x87, 0x01, 0xCA,
  0x11, 0x46, 0xF9, 0xB0, 0xC7, 0xD2, 0x35, 0xA0, 0xC5, 0xAE, 0xD0, 0x38, 0x8E, 0x6B, 0xF5, 0xB3, 0xF0, 0xE3, 0x0D, 0xDB, 0x5E, 0x22, 0x5E, 0x74,
  0x3A, 0x7E, 0xE9, 0xCF, 0xCC, 0x36, 0x88, 0xF2, 0x13, 0x83, 0x05, 0x84, 0x57, 0xBF, 0x5A, 0xC0, 0x6F, 0x3E, 0x46, 0x79, 0x4F, 0x32, 0x94, 0x2C,
  0x5B, 0x52, 0x1D, 0x2F, 0x2A, 0x79, 0xAC, 0x82, 0x8E, 0x6E, 0xBC, 0x97, 0x87, 0xD0, 0x0C, 0x1C, 0x2F, 0x46, 0xA2, 0x37, 0xE8, 0xCC, 0xCD, 0xCE,
  0x8A, 0x33, 0xF2, 0x7A, 0xB2, 0x3A, 0xB1, 0x47, 0x74, 0xE9, 0xB1, 0x7F, 0xAE, 0xC3, 0x7B, 0x7A, 0xED, 0x19, 0xAD, 0xA7, 0x5F, 0x6F, 0xDB, 0x3D,
  0x78, 0xA6, 0x44, 0x37, 0x25, 0x85, 0x76, 0x4A, 0x49, 0x6A, 0x08, 0xE3, 0x7D, 0x7D, 0x80, 0x2F, 0xF6, 0x5F, 0x7C, 0x90, 0x00, 0xB2, 0x52, 0xBC,
  0xC9, 0x21, 0xFA, 0x3F, 0xEE, 0x9E, 0x68, 0xD9, 0x76, 0x1A, 0x73, 0xDB, 0xEB, 0x03, 0xA4, 0x31, 0xD1, 0x62, 0x4D, 0xF4, 0xBA, 0x52, 0x5B, 0xB2,
  0x43, 0xF0, 0xA8, 0xD9, 0x91, 0xE5, 0xD6, 0x5C, 0x1D, 0xA5, 0x3C, 0x35, 0x9D, 0x4B, 0xCB, 0x59, 0x4B, 0xCD, 0x41, 0x59, 0x26, 0x7F, 0x1C, 0x15,
  0xB4, 0x94, 0xE5, 0xA8, 0x6B, 0x3D, 0xBA, 0xE3, 0xBD, 0x68, 0x31, 0x58, 0x12, 0x59, 0x4B, 0x6D, 0xFB, 0x5C, 0x0B, 0xEE, 0xA0, 0xD6, 0x48, 0xA0,
  0x1C, 0xEA, 0xD1, 0x67, 0x7E, 0x0D, 0x55, 0xEA, 0x5D, 0x3B, 0x40, 0x02, 0x35, 0x75, 0xF6, 0x42, 0x05, 0xBD, 0x4B, 0xD9, 0x9F, 0x31, 0x7A, 0xB4,
  0x9D, 0xA2, 0xDB, 0x11, 0xC5, 0x37, 0x42, 0x55, 0x4F, 0x9E, 0xCA, 0x56, 0xCB, 0x07, 0xE6, 0x58, 0x6E, 0x37, 0xB1, 0x5C, 0x1C, 0xD4, 0x32, 0x4F,
  0xA9, 0xE7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/*********** =====> KATUSHA <===== *********/
// HT24L02 //  Katusha KT240 for Katusha M240 CHIP 9k TK-240X
const PROGMEM char NOTE_KATUSHA_TK240X[] = { "TK 240" };
const PROGMEM byte dump_katusha_tk240x[256] = {
  0x00, 0x00, 0x30, 0x39, 0x00, 0xD9, 0x41, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x28,
  0x00, 0x00, 0x00, 0x00, 0x54, 0x4B, 0x32, 0x34, 0x30, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x54, 0x33, 0x37, 0x33, 0x31, 0x32, 0x30, 0x35, 0x32, 0x32, 0x38, 0x37,
  0x30, 0x36, 0x39, 0x30, 0x35, 0x39, 0x31, 0x31, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x4B, 0x41, 0x54, 0x55, 0x53, 0x48, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x41, 0x56, 0x4B, 0x2D, 0x30, 0x34, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// HT24L02 //  Katusha KT240 for Katusha M240
const PROGMEM char NOTE_KATUSHA_DR240[] = { "DR 240" };
const PROGMEM byte dump_katusha_dr240[256] = {
  0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0x00, 0x00,
  0x44, 0x52, 0x32, 0x34, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x33, 0x42, 0x30,
  0x33, 0x34, 0x37, 0x34, 0x31, 0x32, 0x37, 0x42, 0x31, 0x30, 0x39, 0x33,
  0x35, 0x31, 0x31, 0x36, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x4B, 0x41, 0x54, 0x55, 0x53, 0x48, 0x41, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x93, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x4D, 0x41, 0x34, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70,
  0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF
};

// HT24L02 //  Katusha KT240 for Katusha M240 CHIP 6k TK-240A
const PROGMEM char NOTE_KATUSHA_TK240A[] = { "TK 240" };
const PROGMEM byte dump_katusha_tk240a[256] = {
  0x00, 0x00, 0x30, 0x39, 0x00, 0x90, 0xD6, 0x20, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x17, 0x70, 0x00, 0x00, 0x00, 0x00, 0x54, 0x4B, 0x32, 0x34,
  0x30, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x54, 0x33, 0x42, 0x31, 0x38, 0x38, 0x33, 0x35,
  0x37, 0x32, 0x38, 0x38, 0x42, 0x31, 0x31, 0x30, 0x30, 0x33, 0x31, 0x36,
  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x4B, 0x41, 0x54, 0x55, 0x53, 0x48, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x56, 0x4B, 0x2D,
  0x30, 0x34, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00
};

const uint8_t png_transp_128x64[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0xfc, 0xfc, 0x80, 0x80, 0x80, 0xfc, 0xfc, 0x80, 0x80, 0x80, 0xfc, 0xfc, 0x80, 0x80,
  0x80, 0xfc, 0xfc, 0x80, 0x80, 0x80, 0xfc, 0xfc, 0x80, 0x80, 0x80, 0xfc, 0xfc, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0x87, 0x87, 0x87,
  0x87, 0x87, 0x87, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x87, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff,
  0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x63, 0x63, 0x63, 0x63, 0xff, 0xff, 0xff,
  0xff, 0xff, 0x20, 0x20, 0x20, 0x3f, 0x00, 0x00, 0xe0, 0xf0, 0x18, 0x18, 0xf0, 0xf8, 0x0c, 0x06, 0xc3, 0xe1, 0x30, 0x18, 0x8c, 0xcc, 0x4c, 0x4c,
  0xcf, 0x87, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xe3, 0x63, 0x63, 0x63, 0x63, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0x8c, 0x8c, 0x8c, 0x8c, 0xff, 0xff, 0xff, 0xff, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x19, 0x19, 0x19, 0x19, 0x18, 0x0c, 0xce,
  0xc7, 0x41, 0xc0, 0x80, 0x03, 0x07, 0x7c, 0xfc, 0x87, 0x03, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x9c, 0x8c, 0x8c, 0x8c, 0x8c, 0x08, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x71, 0x71, 0x71, 0x71, 0xff, 0xff, 0xff, 0xff, 0xff, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84,
  0x86, 0x83, 0x83, 0x81, 0x81, 0x81, 0x83, 0x87, 0x8c, 0x8c, 0x86, 0x87, 0x80, 0x80, 0x80, 0x81, 0xff, 0xfe, 0x80, 0x80, 0x80, 0xff, 0xff, 0xff,
  0xff, 0x73, 0x71, 0x71, 0x71, 0x71, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07,
  0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff,
  0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// ** DEFINE ** //
// => BRAND
const PROGMEM char BRAND_RICOH[] = { "RICOH" };
const PROGMEM char BRAND_SAMSUNG[] = { "SAMSUNG" };
const PROGMEM char BRAND_XEROX[] = { "XEROX" };
const PROGMEM char BRAND_CANON[] = { "CANON" };
const PROGMEM char BRAND_KATUSHA[] = { "KATUSHA" };
// => PINOUT
const PROGMEM char PINOUT_GVCD[] = { "GVCD" };
const PROGMEM char PINOUT_GVDC[] = { "GVDC" };
const PROGMEM char PINOUT_VDCG[] = { "VDCG" };
const PROGMEM char PINOUT_GCDV[] = { "GCDV" };
const PROGMEM char PINOUT_GDCV[] = { "GDCV" };

// => PAGE
const PROGMEM char PAGE_1_5_K[] = { "1.5K" };
const PROGMEM char PAGE_2_K[] = { "2K" };
const PROGMEM char PAGE_2_6_K[] = { "2.6K" };
const PROGMEM char PAGE_3_K[] = { "3K" };
const PROGMEM char PAGE_3_5_K[] = { "3.5K" };
const PROGMEM char PAGE_5_K[] = { "5K" };
const PROGMEM char PAGE_6_K[] = { "6K" };
const PROGMEM char PAGE_6_4_K[] = { "6.4K" };
const PROGMEM char PAGE_6_5_K[] = { "6.5K" };
const PROGMEM char PAGE_7_K[] = { "7K" };
const PROGMEM char PAGE_8_K[] = { "8K" };
const PROGMEM char PAGE_9_K[] = { "9K" };
const PROGMEM char PAGE_12_K[] = { "12K" };
const PROGMEM char PAGE_30_K[] = { "30K" };
// => CHIP_MEMORY
const PROGMEM int CHIP_MEMORY_128 = 128;
const PROGMEM int CHIP_MEMORY_256 = 256;
const PROGMEM int CHIP_MEMORY_512 = 512;
const PROGMEM int CHIP_MEMORY_1024 = 1024;
const PROGMEM int CHIP_MEMORY_2048 = 2048;

struct Struct_DB { /** Создаем структуру базы данных (проще говоря многомерный массив с разными данными) **/
  const char* brand;
  const char* page;
  const char* pinout;
  const char* note;
  const byte* dump;
  const int chip_memory;
  const int change_crum;
};
/** База Данных **/
const Struct_DB datebase[] PROGMEM = {
  { BRAND_RICOH, PAGE_2_K, PINOUT_GVCD, NOTE_SP_100, dump_ricoh_sp_101e_407059, CHIP_MEMORY_128, 0 },
  { BRAND_RICOH, PAGE_2_6_K, PINOUT_GVCD, NOTE_SP_111, dump_ricoh_sp_110e_407441, CHIP_MEMORY_128, 0 },
  { BRAND_RICOH, PAGE_1_5_K, PINOUT_GVCD, NOTE_SP_150, dump_ricoh_sp_150_408010, CHIP_MEMORY_128, 0 },
  { BRAND_RICOH, PAGE_2_6_K, PINOUT_GVCD, NOTE_SP_200_202_203_210_212, dump_ricoh_sp_200_hl_407262, CHIP_MEMORY_128, 0 },
  { BRAND_RICOH, PAGE_2_6_K, PINOUT_GVCD, NOTE_SP_201_204_211_213_220, dump_ricoh_sp_201_hl_111135, CHIP_MEMORY_128, 0 },
  { BRAND_RICOH, PAGE_2_K, PINOUT_GVDC, NOTE_SP_C220_B, dump_ricoh_sp_c220_221_222_240_406144_black, CHIP_MEMORY_128, 0 },
  { BRAND_RICOH, PAGE_2_K, PINOUT_GVDC, NOTE_SP_C220_C, dump_ricoh_sp_c220_221_222_240_406145_cyan, CHIP_MEMORY_128, 0 },
  { BRAND_RICOH, PAGE_2_K, PINOUT_GVDC, NOTE_SP_C220_M, dump_ricoh_sp_c220_221_222_240_406146_magenta, CHIP_MEMORY_128, 0 },
  { BRAND_RICOH, PAGE_2_K, PINOUT_GVDC, NOTE_SP_C220_Y, dump_ricoh_sp_c220_221_222_240_406147_yellow, CHIP_MEMORY_128, 0 },
  { BRAND_RICOH, PAGE_2_K, PINOUT_GVDC, NOTE_SP_C250_260_B, dump_ricoh_sp_c250_c260_407543_black, CHIP_MEMORY_128, 0 },
  { BRAND_RICOH, PAGE_2_K, PINOUT_GVDC, NOTE_SP_C250_260_M, dump_ricoh_sp_c250_c260_407545_magenta, CHIP_MEMORY_128, 0 },
  { BRAND_RICOH, PAGE_2_K, PINOUT_GVDC, NOTE_SP_C250_260_Y, dump_ricoh_sp_c250_c260_407546_yellow, CHIP_MEMORY_128, 0 },
  { BRAND_RICOH, PAGE_2_K, PINOUT_GVDC, NOTE_SP_C250_260_C, dump_ricoh_sp_c250_c260_407544_cyan, CHIP_MEMORY_128, 0 },
  { BRAND_RICOH, PAGE_6_5_K, PINOUT_GVDC, NOTE_SP_C252_B, dump_ricoh_sp_c252_407716_black, CHIP_MEMORY_128, 0 },
  { BRAND_RICOH, PAGE_6_K, PINOUT_GVDC, NOTE_SP_C252_C, dump_ricoh_sp_c252_407717_cyan, CHIP_MEMORY_128, 0 },
  { BRAND_RICOH, PAGE_6_K, PINOUT_GVDC, NOTE_SP_C252_M, dump_ricoh_sp_c252_407718_magenta, CHIP_MEMORY_128, 0 },
  { BRAND_RICOH, PAGE_6_K, PINOUT_GVDC, NOTE_SP_C252_Y, dump_ricoh_sp_c252_407719_yellow, CHIP_MEMORY_128, 0 },
  { BRAND_RICOH, PAGE_2_6_K, PINOUT_GVCD, NOTE_SP_277, dump_ricoh_sp_277_408160, CHIP_MEMORY_128, 0 },
  { BRAND_RICOH, PAGE_1_5_K, PINOUT_GVDC, NOTE_SP_300, dump_ricoh_sp_300_406956, CHIP_MEMORY_128, 0 },
  { BRAND_RICOH, PAGE_6_K, PINOUT_GVDC, NOTE_SP_310_B, dump_ricoh_sp_310_406479_black, CHIP_MEMORY_128, 0 },
  { BRAND_RICOH, PAGE_6_K, PINOUT_GVDC, NOTE_SP_310_Y, dump_ricoh_sp_310_406482_yellow, CHIP_MEMORY_128, 0 },
  { BRAND_RICOH, PAGE_6_K, PINOUT_GVDC, NOTE_SP_310_M, dump_ricoh_sp_310_122728_magenta, CHIP_MEMORY_128, 0 },
  { BRAND_RICOH, PAGE_6_K, PINOUT_GVDC, NOTE_SP_310_C, dump_ricoh_sp_310_122700_cyan, CHIP_MEMORY_128, 0 },
  { BRAND_RICOH, PAGE_3_5_K, PINOUT_GVCD, NOTE_SP_311_325_NORMAL, dump_ricoh_sp_311_407246, CHIP_MEMORY_128, 0 },
  { BRAND_RICOH, PAGE_6_4_K, PINOUT_GVCD, NOTE_SP_311_325_LARGE, dump_ricoh_sp_311_821242, CHIP_MEMORY_128, 0 },
  { BRAND_RICOH, PAGE_7_K, PINOUT_GVCD, NOTE_SP_330, dump_ricoh_sp_330_408283, CHIP_MEMORY_128, 0 },
  { BRAND_RICOH, PAGE_6_4_K, PINOUT_GVCD, NOTE_SP_377, DUMP_SP_377, CHIP_MEMORY_128, 0 },
  { BRAND_RICOH, PAGE_5_K, PINOUT_GVCD, NOTE_SP_400_450, dump_ricoh_sp_400_450, CHIP_MEMORY_128, 0 },
  { BRAND_RICOH, PAGE_5_K, PINOUT_GVDC, NOTE_SP_3400_3410_3500_3510, dump_ricoh_sp_3400he_406522, CHIP_MEMORY_128, 0 },
  { BRAND_RICOH, PAGE_6_4_K, PINOUT_GVDC, NOTE_SP_3500_3510, dump_ricoh_sp_3500xe_406990, CHIP_MEMORY_128, 0 },
  { BRAND_RICOH, PAGE_12_K, PINOUT_GVCD, NOTE_SP_3600_3610_4510, dump_ricoh_sp_4500he_407318, CHIP_MEMORY_128, 3 },  // 3 функция с 23 начало
  { BRAND_RICOH, PAGE_6_K, PINOUT_GVCD, NOTE_SP_3600_3610_4510, dump_ricoh_sp_4500e_407340, CHIP_MEMORY_128, 3 },    // 3 функция с 23 начало
  { BRAND_SAMSUNG, PAGE_3_K, PINOUT_VDCG, NOTE_SCX_D4200, dump_samsung_scx_d4200a, CHIP_MEMORY_512, 1 },             // 1 функция с 63 начало
  { BRAND_XEROX, PAGE_2_K, PINOUT_VDCG, NOTE_PE_220, dump_xerox_013R00621, CHIP_MEMORY_512, 1 },                     // 1 функция с 63 начало
  { BRAND_XEROX, PAGE_3_K, PINOUT_VDCG, NOTE_WC_3119, dump_xerox_013R00625, CHIP_MEMORY_512, 1 },                    // 1 функция с 63 начало
  { BRAND_XEROX, PAGE_8_K, PINOUT_GCDV, NOTE_WC_4118, dump_xerox_006R01278, CHIP_MEMORY_512, 2 },                    // 2 функция с 63 начало и 191
  { BRAND_RICOH, PAGE_5_K, PINOUT_GVDC, NOTE_SP_360_Y, dump_ricoh_sp_360_408179_yellow, CHIP_MEMORY_128, 0 },
  { BRAND_RICOH, PAGE_5_K, PINOUT_GVDC, NOTE_SP_360_M, dump_ricoh_sp_360_408178_magenta, CHIP_MEMORY_128, 0 },
  { BRAND_RICOH, PAGE_5_K, PINOUT_GVDC, NOTE_SP_360_C, dump_ricoh_sp_360_408177_cyan, CHIP_MEMORY_128, 0 },
  { BRAND_RICOH, PAGE_5_K, PINOUT_GVDC, NOTE_SP_360_B, DUMP_SP_360_BLACK, CHIP_MEMORY_128, 0 },
  { BRAND_CANON, PAGE_5_K, PINOUT_GDCV, NOTE_CANON_G_SERIES, dump_canon_g_series, CHIP_MEMORY_2048, 0 },
  { BRAND_KATUSHA, PAGE_6_K, PINOUT_GVDC, NOTE_KATUSHA_TK240A, dump_katusha_tk240a, CHIP_MEMORY_256, 4 },  // 4 функция
  { BRAND_KATUSHA, PAGE_9_K, PINOUT_GVDC, NOTE_KATUSHA_TK240X, dump_katusha_tk240x, CHIP_MEMORY_256, 4 },  // 4 функция
  { BRAND_KATUSHA, PAGE_30_K, PINOUT_GVDC, NOTE_KATUSHA_DR240, dump_katusha_dr240, CHIP_MEMORY_256, 5 }    // 5 функция
  // Последняя строка без запятой !!!
  // { "", "", "", NOTE, sizeof(), 0 }, // шаблон
};

// Структура для хранения ID ключа
struct iButtonID {
  byte data[8];
  bool isValid;
};

#include <GyverOLED.h>
#include <EncButton.h>
#include <avr/pgmspace.h>  // Для работы с PROGMEM
#include <EEPROM.h>        // Для сохранения яркости
#include <I2C.h>
#include <Wire.h>
#include <OneWire.h>
#include <Eeprom24C01_16.h>  // Подключаем библиотеку которая позволяет управлять микросхемами 24CXX подключать их на ПИН A4 (SDA), A5 (SCL)
#define POWER_PIN 2          // Пин питания у Вас может быть другой
#define RANDOM_PIN A3        // Пин для работы генератора случайных чисел
#define IBOTTON_PIN 11       // Пин питания у Вас может быть другой

byte global_address_eeprom;       // Адрес чипа (адрес динамический, меняется от чипа к чипу)
byte global_id = 0;               // Номер чипа по умолчанию
int global_all_chip_in_database;  // Кол-во чипов в базе данных
const byte* global_name_dump;     // Имя дампа
int global_size_dump = 0;         // Размер чипа
int global_change_crum = 0;       // Номер функции которая помняет серийник 0 -- замена не нужна
int readflag = 1;
int writeflag = 1;
int val = 0;
byte addr[8];
byte ReadID[8] = { 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x2F };  // "Универсальный" ключ. Прошивается последовательность 01:FF:FF:FF:FF:FF:FF:2F

GyverOLED<SSD1306_128x64, OLED_BUFFER> oled;
EncButton enc1(10, 9, 8);  // Энкодер с кнопкой

OneWire ibutton(IBOTTON_PIN);  // Пин D11 для подлючения iButton (Data)

#define MAIN_MENU 0
#define SUB_MENU_1 1
#define SUB_MENU_2 2
#define SUB_MENU_3 3

int numEntries = sizeof(datebase) / sizeof(datebase[0]);  // Количество элементов в массиве
uint8_t brightness = 255;                                 // Текущая яркость (0-255)

// Главное меню (хранится в PROGMEM)
const char mainMenu_1[] PROGMEM = "Прошивка";
const char mainMenu_2[] PROGMEM = "Настройки";
const char mainMenu_3[] PROGMEM = "Перезагрузка";
const char mainMenu_4[] PROGMEM = "IBOTTOM";

const char* const mainMenu[] PROGMEM = { mainMenu_1, mainMenu_2, mainMenu_3, mainMenu_3 };

// Подменю 2 (хранится в PROGMEM)
const char submenu2_1[] PROGMEM = "Яркость";
const char submenu2_2[] PROGMEM = "Изменить CRUM";
const char submenu2_3[] PROGMEM = "Считать DUMP";
const char submenu2_4[] PROGMEM = "Остаток Ricoh";
const char submenu2_5[] PROGMEM = "Назад";
const char* const submenu2[] PROGMEM = { submenu2_1, submenu2_2, submenu2_3, submenu2_4, submenu2_5 };

// Подменю 3 (хранится в PROGMEM)
const char submenu3_1[] PROGMEM = "Записать";
const char submenu3_2[] PROGMEM = "Считать";
const char submenu3_3[] PROGMEM = "Клониравать";
const char submenu3_4[] PROGMEM = "Востоновить";
const char submenu3_5[] PROGMEM = "Назад";
const char* const submenu3[] PROGMEM = { submenu3_1, submenu3_2, submenu3_3, submenu3_4, submenu3_5 };

uint8_t menuState = MAIN_MENU;  // Состояние текущего меню
uint8_t pointer = 0;            // Выбранный пункт
bool upd = true;                // Флаг обновления экрана

void setup() {
  Serial.begin(9600);
  randomSeed(analogRead(RANDOM_PIN));
  pinMode(POWER_PIN, OUTPUT);
  // pinMode(IBOTTON_PIN, INPUT);
  // digitalWrite(IBOTTON_PIN, HIGH);
  oled.init();
  brightness = EEPROM.read(0);  // Чтение яркости из EEPROM
  oled.setContrast(brightness);
  oled.clear();
  oled.drawBitmap(0, 0, png_transp_128x64, 128, 64, BITMAP_NORMAL);
  oled.update();
  delay(2000);
  oled.clear();
  oled.update();
}

void loop() {
  enc1.tick();
  if (enc1.left()) {  // Управление указателем
    pointer = constrain(pointer - 1, 0, getMenuLength() - 1);
    upd = true;
  }
  if (enc1.right()) {
    pointer = constrain(pointer + 1, 0, getMenuLength() - 1);
    upd = true;
  }
  if (enc1.click()) {  // Обработка клика (вход в подменю или выполнение действия)
    handleMenuAction();
    upd = true;
  }
  if (menuState == SUB_MENU_2 && pointer == 0 && enc1.turn() && enc1.pressing()) {  // Регулировка яркости в SUB_MENU_2
    brightness = constrain(brightness + enc1.dir() * 20, 0, 255);                   // Изменение яркости
    oled.setContrast(brightness);
    upd = true;
  }
  if (upd) {  // Отрисовка экрана
    upd = false;
    oled.clear();
    renderMenu();
    oled.update();
  }
}

void renderMenu() {
  uint8_t menuLength = getMenuLength();
  uint8_t itemsPerScreen = 8;  // Количество пунктов на экране
  uint8_t startIndex = 0;
  if (pointer >= itemsPerScreen) {  // Прокрутка меню, если пунктов больше, чем помещается на экран
    startIndex = pointer - itemsPerScreen + 1;
  }
  for (uint8_t i = 0; i < itemsPerScreen && (startIndex + i) < menuLength; i++) {  // Отрисовка видимых пунктов меню
    oled.setCursor(2, i);
    char buffer[50];  // Буфер для хранения строки из PROGMEM
    if (menuState == SUB_MENU_1) {
      strncpy_P(buffer, (const char*)pgm_read_ptr(&datebase[startIndex + i].note), sizeof(buffer));  // Для SUB_MENU_1 используем динамическое копирование данных из PROGMEM
    } else {
      const char* const* currentMenu = getCurrentMenu();  // Для других меню используем PROGMEM
      strncpy_P(buffer, (const char*)pgm_read_ptr(&currentMenu[startIndex + i]), sizeof(buffer));
    }
    oled.print(buffer);                                      // Отображение текста
    if (menuState == SUB_MENU_2 && (startIndex + i) == 0) {  // Отображение текущей яркости (только для SUB_MENU_2)
      oled.setCursor(60, i);
      drawBar(brightness);
      oled.setCursor(100, i);
      oled.print((brightness * 100) / 255);  // Отображение числового значения яркости
      oled.print("%");
    }
    if ((startIndex + i) == pointer) {  // Выделение выбранного пункта
      // oled.invertText(true);            // Инвертирование цвета для выбранного пункта
      oled.setCursor(0, i);  // Устанавливаем курсор на начало строки
      oled.print("> ");
      oled.print(buffer);
      // oled.invertText(false);
    }
  }
}

void handleMenuAction() {
  switch (menuState) {

    case MAIN_MENU:
      if (pointer == 0) {
        menuState = SUB_MENU_1;
      } else if (pointer == 1) menuState = SUB_MENU_2;
      else if (pointer == 2) exitMenu();  // Выход
      pointer = 0;                        // Сброс указателя
      break;

    case SUB_MENU_1:
      if (pointer == numEntries) menuState = MAIN_MENU;  // Возврат в главное меню
      else {
        oled.clear();  // Действие для выбранного пункта
        oled.home();
        oled.println(F("Выбран: "));
        char buffer[50];
        set_global_variables(pointer);
        strncpy_P(buffer, (const char*)pgm_read_ptr(&datebase[pointer].brand), sizeof(buffer));
        buffer[sizeof(buffer) - 1] = '\0';
        oled.println(buffer);
        strncpy_P(buffer, (const char*)pgm_read_ptr(&datebase[pointer].note), sizeof(buffer));
        buffer[sizeof(buffer) - 1] = '\0';
        oled.println(buffer);
        strncpy_P(buffer, (const char*)pgm_read_ptr(&datebase[pointer].page), sizeof(buffer));
        buffer[sizeof(buffer) - 1] = '\0';
        oled.println(buffer);
        strncpy_P(buffer, (const char*)pgm_read_ptr(&datebase[pointer].pinout), sizeof(buffer));
        buffer[sizeof(buffer) - 1] = '\0';
        oled.println(buffer);
        oled.update();
        delay(1000);
        power_on_for_chip();          // Подаем питание на чип
        if (search_address_chip_3())  //сканируем шину i2c на наличие чипа, если все хорошо
        {
          firmware();  // Скоростная прошивка чипа
        } else {
          oled.clear();  // Действие для выбранного пункта
          oled.home();
          oled.println(F("Ошибка связи с чипом!"));
          oled.update();
        }
        power_off_for_chip();             // Выключаем питание
        set_global_variables(global_id);  // Возврат в меню
        delay(1000);
        menuState = MAIN_MENU;
        upd = true;
      }
      break;

    case SUB_MENU_2:
      if (pointer == 4) menuState = MAIN_MENU;  // Возврат в главное меню
      else if (pointer == 0) {
        // Регулировка яркости
        EEPROM.write(0, brightness);  // Сохранение яркости в EEPROM
        oled.clear();
        oled.home();
        oled.print(F("Сохранено: "));
        oled.print(brightness);
        oled.update();
        delay(1000);
        upd = true;
      } else if (pointer == 1) {
        oled.clear();  // Действие для Option 2.2
        oled.home();
        oled.println("Остаток страниц");
        print_sn_on_oled_universal(53, 63);
        oled.update();
        delay(1000);
        upd = true;
      } else if (pointer == 2) {
        oled.clear();  // Действие для Option 2.2
        oled.home();
        oled.println("Остаток страниц");
        extract_dump();
        delay(1000);
        upd = true;
      } else if (pointer == 3) {
        int pages = get_total_pages_from_eeprom();
        if (pages == -1) {
          oled.clear();  // Обработка ошибки (например, вывод сообщения на дисплей)
          oled.home();
          oled.print(F("Ошибка связи с чипом!"));
          oled.update();
          delay(2000);
        } else {
          oled.clear();  // Использование значения (например, вывод на дисплей или выполнение других действий)
          oled.home();
          oled.print(F("Остаток страниц: "));
          oled.print(pages);
          oled.update();
          delay(2000);
          upd = true;
        }
      }
      break;

    case SUB_MENU_3:
      if (pointer == 4) menuState = MAIN_MENU;  // Возврат в главное меню
      else if (pointer == 0) {
        // Записать
        oled.clear();
        oled.home();
        upd = true;
      } else if (pointer == 1) {
        // Считать iBotton
        oled.clear();
        oled.home();
        iButtonID key = read_iButton();
        if (key.isValid) {
          oled.print("Считанный ID: ");
          Serial.print("Считанный ID: ");
          for (byte i = 0; i < 8; i++) {
            oled.print(key.data[i], HEX);
            Serial.print(key.data[i], HEX);
            if (i < 7) Serial.print(":");
          }
          Serial.println();
        }
        delay(1000);
        upd = true;
      } else if (pointer == 2) {
        // Клониравать iBotton
        oled.clear();
        oled.home();
        clone_iButton();
        upd = true;
      } else if (pointer == 3) {
        // Востоновить iBotton
        oled.clear();
        oled.home();
        repair_iButton();
        upd = true;
      }
      break;
  }
}

const char* const* getCurrentMenu() {
  switch (menuState) {
    case MAIN_MENU: return mainMenu;
    case SUB_MENU_2: return submenu2;
    case SUB_MENU_3: return submenu3;
    default: return nullptr;  // Для SUB_MENU_1 используем динамическое копирование данных
  }
}

uint8_t getMenuLength() {
  switch (menuState) {
    case MAIN_MENU: return sizeof(mainMenu) / sizeof(mainMenu[0]);
    case SUB_MENU_1: return numEntries;  // +1 для пункта "Back"
    case SUB_MENU_2: return sizeof(submenu2) / sizeof(submenu2[0]);
    case SUB_MENU_3: return sizeof(submenu3) / sizeof(submenu3[0]);
    default: return 0;
  }
}

void drawBar(byte percent) {
  oled.drawByte(0b01111110);  // стенка
  oled.drawByte(0b11111111);  // попка
  for (byte i = 0; i < 255 / 8; i++) {
    if (i < percent / 8) oled.drawByte(0b11111111);
    else oled.drawByte(0b10000001);
  }
  oled.drawByte(0b11111111);  // попка
  oled.drawByte(0b01111110);  // попка
}
void (*resetFunc)(void) = 0;  // Reset MC function

void exitMenu() {
  oled.clear();
  oled.home();
  oled.print(F("ПЕРЕЗАГРУЗКА..."));
  oled.update();
  delay(1000);
  resetFunc();
}

void set_global_variables(int row) {
  global_name_dump = (int16_t)pgm_read_word(&datebase[row].dump);  // Устанавливаем глобальные переменные dump chip_memory change_crum
  global_size_dump = (int16_t)pgm_read_word(&datebase[row].chip_memory);
  global_change_crum = (int16_t)pgm_read_word(&datebase[row].change_crum);
}

/****************************** ВКЛЮЧАЕМ/ВЫКЛЮЧАЕМ ПИТАНИЯ ЧИПА ******************************/

void power_on_for_chip() {
  digitalWrite(POWER_PIN, HIGH);  // Подаем питания на A7 для запитки чипа
  delay(500);                     // Задержка для поднятия напряжения
}

void power_off_for_chip() {
  digitalWrite(POWER_PIN, LOW);  // Выключаем питания на A2 пине
}

/****************************** ПОИСК ЧИПА НА ШИНЕ I2C ВЕРСИЯ 3 МОДИФИКАЦИЯ 2024-04-17 OK ******************************/

bool search_address_chip_3() {
  byte TotalDevicesFound = 0;
  const byte DISPLAY_ADDRESS = 0x3C;  // Адрес дисплея, который нужно игнорировать
  Serial.println(F("Scanning for devices...please wait"));
  Serial.println();
  for (byte address = 0; address <= 0x7F; address++) {  // Сканируем шину I2C
    // Serial.println(address, HEX);
    if (address == DISPLAY_ADDRESS) {  // Пропускаем адрес дисплея
      Serial.print(F("Skipping display address - 0x"));
      Serial.println(address, HEX);
      continue;  // Пропускаем текущую итерацию цикла
    }
    Wire.beginTransmission(address);                    // Начинаем передачу по адресу
    byte error = Wire.endTransmission();                // Завершаем передачу и получаем статус
    if (error == 0) {                                   // Обработка результата
      Serial.print(F("Found device at address - 0x"));  // Устройство найдено
      Serial.println(address, HEX);
      if (TotalDevicesFound == 0) {  // Сохраняем первый найденный адрес
        global_address_eeprom = address;
        Serial.print(F("Save address device - 0x"));
        Serial.println(address, HEX);
      }
      TotalDevicesFound++;    // Увеличиваем счётчик найденных устройств
    } else if (error == 4) {  // Ошибка (например, устройство не отвечает)
      Serial.print(F("Unknown error at address - 0x"));
      Serial.println(address, HEX);
    }
  }
  if (TotalDevicesFound == 0) {  // Если устройства не найдены
    Serial.println(F("No devices found."));
    return false;
  }
  return true;  // Устройства найдены
}

/****************************** СКОРОСТНАЯ ПРОШИВКА ЧИПОВ УНИВЕРСАЛЬНАЯ БИБЛИОТЕКА OK ******************************/
void firmware() {
  oled.clear();
  oled.home();
  oled.println(F("FIRMWARE CHIP"));
  oled.update();
  Eeprom24C01_16 eeprom(global_address_eeprom);  // Подключаем библиотеку и задем адрес и размер чипа
  eeprom.initialize();
  byte sizeArray = 64;                       // Занимаемый размер массива в оперативке 2 4 8 16 32 64 128 байт Максимум 128 байт т.к. оперативку надо экономить
  byte cycl = global_size_dump / sizeArray;  // количество циклов
  for (byte x = 0; x < cycl; x++)            // старт цикла
  {
    byte array_bytes[sizeArray];          // создаем пустой массив байт
    for (byte y = 0; y < sizeArray; y++)  // Из памяти ардуино считываем часть дампа в массив
    {
      word numByte = y + (x * sizeArray);
      array_bytes[y] = pgm_read_byte(&global_name_dump[numByte]);
    }
    if ((global_size_dump == 128) || (global_size_dump == 256)) { eeprom.writeBytes_24C01_02(sizeArray * x, sizeArray, array_bytes); }  // Записываем массив в чип
    if ((global_size_dump == 512) || (global_size_dump > 512)) { eeprom.writeBytes_24C04_16(sizeArray * x, sizeArray, array_bytes); }
    delay(10);  // Пауза для записи ячейки памяти
    Serial.print(F("String => "));
    Serial.print(x);
    Serial.print(F(" "));  // Показываем массив
    for (byte i = 0; i < sizeArray; i++) {
      Serial.print(array_bytes[i], HEX);
      Serial.print(F(" "));
    }
    Serial.println(F(" "));
    array_bytes[0] = '\0';  // Чистим массив
  }
  oled.print(F("DONE !!!"));  // Сообщение о прошивки чипа
  oled.update();
  Serial.println(F("FIRMWARE GOOD"));
  delay(1000);
  verification_dump();   // Проверка чипа
  change_crum_select();  //Смена серийного номера
}

/************************************* ПРОВЕРКА ДАМПА ПОСЛЕ ПРОШИВКИ OK *************************************/
void verification_dump() {
  oled.clear();
  oled.home();
  oled.println(F("VERIFICATION"));
  oled.update();
  Serial.print(F("VERIFICATION "));
  Eeprom24C01_16 eeprom(global_address_eeprom);
  eeprom.initialize();
  byte error = 0;                             // Кол-во ошибок
  for (int i = 0; i < global_size_dump; i++)  // Циклы
  {
    if (pgm_read_byte(&global_name_dump[i]) != eeprom.readByte_24C04_16(i)) {
      error = error + 1;
    }
    if (error == 0)  // Если ошибок нет то GOOD иначе ERROR
    {
      oled.println(F("GOOD"));
      Serial.println(F("GOOD"));
      oled.update();
      delay(1000);
      break;
    } else {
      oled.println(F("ERROR"));
      Serial.println(F("ERROR"));
      oled.update();
      delay(1000);
      break;
    }
  }
}

/*************************************  ГЕНЕРАТОР СЕРИЙНОГО НОМЕРА МОДИФИКАЦИЯ 2024-05-17 OK  *************************************/
void change_crum_select() {  // Выбор какая функция смены серийного номера заработает
  switch (global_change_crum) {
    case 0:
      break;
    case 1:
      change_crum_universal(56, 63);  // SAMSUNG XEROX где 1 серийник Меняем байты серийника и показываем его меняем с 56 байта по 63 байт
      print_sn_on_oled_universal(53, 63);
      break;
    case 2:
      change_crum_two_xerox();  // SAMSUNG XEROX где 2 серийника
      break;
    case 3:
      change_crum_universal(22, 23);  // RICOH SP_3600_3610_4510 Меняем байты серийника и показываем его меняем с 22 байта по 23 байт
      print_sn_on_oled_universal(22, 23);
      break;
    case 4:
      change_crum_universal(60, 73);  // KATUSHA TK 240 Меняем байты серийника и показываем его меняем с 60 байта по 73 байт
      print_sn_on_oled_universal(60, 73);
      break;
    case 5:
      change_crum_universal(52, 65);  // KATUSHA DR 240 Меняем байты серийника и показываем его меняем с 42 байта по 65 байт
      print_sn_on_oled_universal(52, 65);
      break;
    default:
      break;
  }
}

void change_crum_universal(int From, int To) {   // Генератор crum иниверсальный указывается с какого байда и по какой байт поменять цифры
  Eeprom24C01_16 eeprom(global_address_eeprom);  // Инициализация eeprom
  eeprom.initialize();
  for (int i = From; i <= To; i++)  // Меняем байты от (FROM) и до (TO)
  {
    int randomNum = random(48, 57);           // ANSI (48-58) а в DEC (0-9)
    eeprom.writeByte_24C04_16(i, randomNum);  // Записываем значение в адрес
    delay(10);                                // пауза для записи в ячейку EEPROM
  }
}

void change_crum_two_xerox() {  // Генератора для Samsung или Xerox где надо сменить 2 номерa Младший разряд находится в 63 байте и в 191
  Eeprom24C01_16 eeprom(global_address_eeprom);
  eeprom.initialize();
  int temp_sn_one = 63;
  int temp_sn_two = 191;
  for (int i = 6; i > 0; i--)  //  меняем 6 младших разрядов серийника
  {
    int randomNum = random(48, 57);                     // ANSI (48-58) а в DEC (0-9)
    eeprom.writeByte_24C04_16(temp_sn_one, randomNum);  // Записываем значение в адрес
    delay(10);                                          // пауза для записи в ячейку EEPROM
    eeprom.writeByte_24C04_16(temp_sn_two, randomNum);  // Записываем значение в адрес
    delay(10);                                          // пауза для записи в ячейку EEPROM
    temp_sn_one--;                                      // переход к старшему разряду
    temp_sn_two--;                                      // переход к старшему разряду
  }
  print_sn_on_oled_universal(53, 63);  // Показываем серийный номер на oled
  Serial.println(F("CHANGE TWO CRUM GOOD"));
}

/************************************* ВЫВОД СЕРИЙНОГО НОМЕРА НА oled OK *************************************/

void print_sn_on_oled_universal(int From, int To) {
  // Инициализация
  Eeprom24C01_16 eeprom(global_address_eeprom);
  eeprom.initialize();
  oled.clear();  // Показываем на дисплее надпись NEW CRUM
  oled.print(F("NEW CRUM"));
  Serial.print(F("NEW CRUM "));
  oled.setCursor(0, 1);
  for (int i = From; i <= To; i++) {             // Считываем байты от и до
    char c = (char)eeprom.readByte_24C04_16(i);  // получаем ascii из hex
    oled.print(c);
    Serial.print(c);
  }
  Serial.println(" ");  // Задержка для просмотра номера
  delay(1500);
  Serial.println(F("CHANGE CRUM GOOD"));  // Сообщаем что все ок
}

/************************************* ПОКАЗ ДАМПА НА oled *************************************/

void read_chip_and_display_it() {
  Eeprom24C01_16 eeprom(global_address_eeprom);
  eeprom.initialize();
  int byte_in_str = 16;
  int sizeof_chip = global_size_dump;
  int num_str_in_chip = sizeof_chip / byte_in_str;
  for (int i_1 = 0; i_1 < num_str_in_chip; i_1++) {
    oled.clear();
    oled.println(F("STRING # "));
    oled.println(i_1);
    for (int i_2 = 0; i_2 < 17; i_2++) {
      oled.setCursor(i_2, 1);
      char a = (char)eeprom.readByte_24C04_16(i_2 + i_1 * byte_in_str);  // Получаем ascii
      char b;                                                            //
      if (a < 32) { b = 32; }                                            // если a 0 то ставим пробел HEX(32)
      else {
        b = a;
      }
      oled.println(b);  // 15 31 47 63 79 95 111 127
    }
    delay(500);
  }
}


void extract_dump() {
  oled.clear();
  oled.print("READ DUMP ON PC");
  power_on_for_chip();  // Подаем питание на чип

  if (search_address_chip_3())  //сканируем шину i2c на наличие чипа, если есть ошибка перепрыгиваем на error_i2c_scan
  {
    Eeprom24C01_16 eeprom(global_address_eeprom);
    eeprom.initialize();

    //int sizeof_chip = capacity_chip;  // Количество байт в чипе
    int num_str_in_chip = 128 / 16;  // Количство строк в чипе

    // Столбики и строки для красоты =)
    //Serial.println(F(""));
    //Serial.println(F("   | 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0E 0D 0F"));
    //Serial.println(F("- - - - - - - - - - - - - - - - - - - - - - - - - - "));
    //const char* column[] = { "00", "10", "20", "30", "40", "50", "60", "70", "80", "90", "0A", "0B", "0C", "0D", "0E", "0F" };

    for (int count_str = 0; count_str < num_str_in_chip; count_str++) {
      //Serial.print( column[count_str] );
      //Serial.print(" | ");

      for (int i = 0; i < 16; i++) {
        unsigned char letter = (unsigned char)eeprom.readByte_24C04_16(i + count_str * 16);  // Получаем байт из чипа
        if (letter < 16) { Serial.print(F("0")); }                                           // Если это число меньше 16 то добавляем 0 спереди
        Serial.print(letter, HEX);
        Serial.print(F(" "));
      }
      Serial.println(F(""));  // Переход на новую строку
    }
  }

  // Включаем питание
  power_off_for_chip();
}


/************************************* ПОКАЗ ОТПЕЧАТАННЫХ СТРАНИЦ ДЛЯ RICOH ОК *************************************/
int get_total_pages_from_eeprom() {
  const byte HIGHER_BYTE_ADDRESS = 65;  // Адрес старшего байта
  const byte LOWER_BYTE_ADDRESS = 64;   // Адрес младшего байта
  power_on_for_chip();
  Serial.println("Power ON");  // Подаем питание на чип
  // Проверка наличия чипа на шине I2C
  if (!search_address_chip_3()) {
    // Если чип не найден, возвращаем -1 как признак ошибки
    power_off_for_chip();  // Выключаем питание
    Serial.print("Ощибка");
    return -1;
  }
  // Инициализация EEPROM
  Eeprom24C01_16 eeprom(global_address_eeprom);
  eeprom.initialize();  // Вызываем инициализацию без проверки
  // Чтение данных из EEPROM
  byte HigherByte = eeprom.readByte_24C01_02(HIGHER_BYTE_ADDRESS);  // Старший байт
  byte LowerByte = eeprom.readByte_24C01_02(LOWER_BYTE_ADDRESS);    // Младший байт
  int totalPages = (HigherByte << 8) | LowerByte;                   // Объединение байтов
  Serial.print(totalPages);
  power_off_for_chip();  // Выключаем питание
  return totalPages;     // Возвращаем количество страниц
}

/************************************* Ibotton *************************************/

// Функция чтения ID iButton с явным возвратом структуры
iButtonID read_iButton() {
  iButtonID result = { { 0 }, false };

  if (!ibutton.search(result.data)) {
    ibutton.reset_search();
    return result;
  }

  // Проверка контрольной суммы
  result.isValid = (ibutton.crc8(result.data, 7) == result.data[7]);
  return result;
}

// Функция записи ID на iButton
bool write_iButton(byte* newID) {
  // Активация режима записи
  ibutton.skip();
  ibutton.reset();
  ibutton.write(0xD1);
  digitalWrite(IBOTTON_PIN, LOW);
  pinMode(IBOTTON_PIN, OUTPUT);
  delayMicroseconds(60);
  pinMode(IBOTTON_PIN, INPUT);
  digitalWrite(IBOTTON_PIN, HIGH);
  delay(10);

  // Запись нового ID
  ibutton.skip();
  ibutton.reset();
  ibutton.write(0xD5);

  for (byte x = 0; x < 8; x++) {
    for (byte bit = 0; bit < 8; bit++) {
      if (newID[x] & (1 << bit)) {
        digitalWrite(IBOTTON_PIN, LOW);
        pinMode(IBOTTON_PIN, OUTPUT);
        delayMicroseconds(60);
        pinMode(IBOTTON_PIN, INPUT);
        digitalWrite(IBOTTON_PIN, HIGH);
        delay(10);
      } else {
        digitalWrite(IBOTTON_PIN, LOW);
        pinMode(IBOTTON_PIN, OUTPUT);
        pinMode(IBOTTON_PIN, INPUT);
        digitalWrite(IBOTTON_PIN, HIGH);
        delay(10);
      }
    }
  }

  // Фиксация записи
  ibutton.reset();
  ibutton.write(0xD1);
  digitalWrite(IBOTTON_PIN, LOW);
  pinMode(IBOTTON_PIN, OUTPUT);
  delayMicroseconds(10);
  pinMode(IBOTTON_PIN, INPUT);
  digitalWrite(IBOTTON_PIN, HIGH);
  delay(10);

  return true;
}

// Функция клонирования с ожиданием ключа
bool clone_iButton() {
  Serial.println("Приложите исходный ключ...");

  // Ожидание исходного ключа
  iButtonID sourceID;
  do {
    sourceID = read_iButton();
    delay(200);
  } while (!sourceID.isValid);

  Serial.println("Исходный ключ считан. Приложите новый ключ для записи...");

  // Ожидание целевого ключа
  unsigned long startTime = millis();
  while (millis() - startTime < 30000) {  // Таймаут 30 секунд
    if (ibutton.reset()) {                // Проверка наличия ключа
      bool writeResult = write_iButton(sourceID.data);
      Serial.println(writeResult ? "Ключ успешно записан!" : "Ошибка записи");
      return writeResult;
    }
    delay(200);
  }

  Serial.println("Таймаут ожидания ключа!");
  return false;
}

// Функция восстановления iButton
bool repair_iButton() {
  const byte universalID[8] = { 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x2F };
  Serial.println("Приложите ключ для восстановления...");

  // Ожидание ключа
  unsigned long startTime = millis();
  while (millis() - startTime < 30000) {  // Таймаут 30 секунд
    if (ibutton.reset()) {                // Проверка наличия ключа
      bool writeResult = write_iButton(universalID);
      Serial.println(writeResult ? "Ключ восстановлен!" : "Ошибка восстановления");
      return writeResult;
    }
    delay(200);
  }

  Serial.println("Таймаут ожидания ключа!");
  return false;
}